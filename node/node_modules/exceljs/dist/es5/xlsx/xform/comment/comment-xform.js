/**
 * Copyright (c) 2016 Guyon Roche
 * LICENCE: MIT - please refer to LICENCE file included with this module
 * or https://github.com/guyonroche/exceljs/blob/master/LICENSE
 */

'use strict';

var utils = require('../../../utils/utils');
var BaseXform = require('../base-xform');
var ListXform = require('../list-xform');
var RXform = require('./r-xform')
var TextXform = require('./text-xform')
var rPhXform = require('./phoneticrun-xform')

var CommentXform = module.exports = function () {
  this.map = {
    t: new TextXform(),
    r: new RXform(),
    rPh: new ListXform({ tag: 'rPh', count: false, childXform: new rPhXform() })
  }
};

utils.inherits(CommentXform, BaseXform, {

  get tag() {
    return 'comment';
  },

  render: function render(xmlStream, model) {
    if (model) {
      xmlStream.openNode(this.tag, model.attributes);
        xmlStream.openNode("text");
          this.map.r.render(xmlStream, model.r);
          this.map.t.render(xmlStream, model.t);
          this.map.rPh.render(xmlStream, model.rPh);
          if (model.phoneticPr)
           xmlStream.leafNode("phoneticPr", model.phoneticPr);
        xmlStream.closeNode();
      xmlStream.closeNode();
    }
  },

  parseOpen: function parseOpen(node) {
    if (this.parser) {
      this.parser.parseOpen(node);
      return true;
    }
    switch (node.name) {
      case this.tag:
        this.map.r.model = []
        this.map.rPh.model = []
        this.model = {}
        this.model.attributes = node.attributes;
        return true;
      case "phoneticPr":
        this.model[tag] = node.attributes;
      default:
        this.parser = this.map[node.name];
        if (this.parser) {
          this.parser.parseOpen(node);
        }
        return true;
    }
  },
  parseText: function parseText(text) {
    if (this.parser) {
      this.parser.parseText(text);
      return true;
    }
  },

  parseClose: function parseClose(name) {
    if (this.parser) {
      if (!this.parser.parseClose(name)) {
        this.parser = undefined;
      }
      return true;
    }
    if (name==this.tag) {
      this.model.text = {}
      if (this.map.t.model)
        this.model.text.t = this.map.t.model;
      if (this.map.r.model.length>0)
        this.model.text.r = this.map.r.model;
      if (this.map.rPh.model.length>0) {
        this.model.text.rPh = this.map.rPh.model;
      }
      return false;
    }
    return true;
  },
});
//# sourceMappingURL=sheet-xform.js.map
