/**
 * Copyright (c) 2016 Guyon Roche
 * LICENCE: MIT - please refer to LICENCE file included with this module
 * or https://github.com/guyonroche/exceljs/blob/master/LICENSE
 */

'use strict';

var utils = require('../../../utils/utils');
var XmlStream = require('../../../utils/xml-stream');
var BaseXform = require('../base-xform');
var ListXform = require('../list-xform');
var AuthorXform = require('./author-xform');
var CommentXform = require('./comment-xform')

var CommentsXform = module.exports = function () {
  this.map = {
    authors: new ListXform({ tag: 'authors', count: false, childXform: new AuthorXform() }),
    commentList: new ListXform({ tag: 'commentList', count: false, childXform: new CommentXform() })
  };
};


utils.inherits(CommentsXform, BaseXform, {
  COMMENT_ATTRIBUTES: {
    xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'
  },
}, {
  prepare: function() {
    this.model = {
      authors: [],
      commentList: []
    }
  },
  addOne: function(cellcomment) { //cellcomment: {author, comment, attributes}
    var authorId = this.model.authors.indexOf(cellcomment.author);
    if (authorId==-1) {
      authorId = this.model.authors.length;
      this.model.authors.push(cellcomment.author);
    }
    var comment = cellcomment.text
    comment.attributes = cellcomment.attributes
    comment.attributes.authorId = authorId
    this.model.commentList.push(comment);
  },
  getCount: function() {
    return this.model.commentList.length;
  },
  render: function render(xmlStream, model) {
    xmlStream.openXml(XmlStream.StdDocAttributes);
    xmlStream.openNode('comments', CommentsXform.COMMENT_ATTRIBUTES);
    this.map.authors.render(xmlStream, model.authors);
    this.map.commentList.render(xmlStream, model.commentList);

    xmlStream.closeNode();

  },

  parseOpen: function parseOpen(node) {
    if (this.parser) {
      this.parser.parseOpen(node);
      return true;
    }
    switch (node.name) {
      case 'comments':
        return true;
      default:
        this.parser = this.map[node.name];
        if (this.parser) {
          this.parser.parseOpen(node);
        }
        return true;
    }
  },
  parseText: function parseText(text) {
    if (this.parser) {
      this.parser.parseText(text);
    }
  },
  // authors:list
  // commets: [text:{t:text,r:[], rPh:[]}]
  parseClose: function parseClose(name) {
    if (this.parser) {
      if (!this.parser.parseClose(name)) {
        this.parser = undefined;
      }
      return true;
    }
    if (name=='comments') {
        this.model = {
          authors: this.map.authors.model,
          commentsList: this.map.commentList.model
        };
        return false;
    }
  }
});
//# sourceMappingURL=sheet-xform.js.map
