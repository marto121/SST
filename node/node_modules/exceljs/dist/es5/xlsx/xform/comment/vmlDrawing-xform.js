/**
 * Copyright (c) 2016 Guyon Roche
 * LICENCE: MIT - please refer to LICENCE file included with this module
 * or https://github.com/guyonroche/exceljs/blob/master/LICENSE
 */

'use strict';

var utils = require('../../../utils/utils');
var XmlStream = require('../../../utils/xml-stream');
var BaseXform = require('../base-xform');

var VmlDrawingXform = module.exports = function () {
};


utils.inherits(VmlDrawingXform, BaseXform, {
  VMLDRAWING_ATTRIBUTES: {
    'xmlns:v': 'urn:schemas-microsoft-com:vml',
    'xmlns:o': 'urn:schemas-microsoft-com:office:office',
    'xmlns:x': 'urn:schemas-microsoft-com:office:excel'
  },
}, {
  render: function render(xmlStream, model) {
    xmlStream.openXml_(VmlDrawingXform.VMLDRAWING_ATTRIBUTES);
    xmlStream.openNode('o:shapelayout', {'v:ext':'edit'});
      xmlStream.leafNode('o:idmap', {'v:ext': 'edit', data:'1'})
    xmlStream.closeNode();
    xmlStream.openNode('v:shapetype', {id: '_x0000_t202', coordsize: '21600,21600', 'o:spt': '202', path: 'm,l,21600r21600,l21600,xe'})
      xmlStream.leafNode('v:stroke', {joinstyle: 'miter'})
      xmlStream.leafNode('v:path', {gradientshapeok: 't', 'o:connecttype': 'rect'})
    xmlStream.closeNode()
    var _this = this;
    model.forEach(function(drawing){
      var address = _this.addressFromName(drawing.address);
      xmlStream.openNode('v:shape', {id: '_x0000_s'+address.Row+'_'+address.Col, type:'#_x0000_t202'
      , style:'position:absolute;margin-left:105pt;margin-top:36.6pt;width:100.2pt;height:60.6pt;z-index:1;visibility:hidden'
      , fillcolor: 'infoBackground [80]', strokecolor: 'none [81]', 'o:insetmode': 'auto'});
        xmlStream.leafNode('v:fill', {color2: 'infoBackground [80]'});
        xmlStream.leafNode('v:shadow', {color:'none [81]', obscured:'t'});
        xmlStream.leafNode('v:path', {'o:connecttype': 'none'});
        xmlStream.openNode('v:textbox', {style: 'mso-direction-alt:auto'});
          xmlStream.leafNode('div', {style: 'text-align:left'});
        xmlStream.closeNode();
        xmlStream.openNode('x:ClientData', {ObjectType:'Note'});
          xmlStream.leafNode('x:MoveWithCells');
          xmlStream.leafNode('x:SizeWithCells');
          xmlStream.leafNode('x:Anchor', null, '2, 12, 2, 10, 4, 17, 6, 14');
          xmlStream.leafNode('x:AutoFill', null, 'False');
          xmlStream.leafNode('x:Row', null, address.Row);
          xmlStream.leafNode('x:Column', null, address.Col);
        xmlStream.closeNode();
      xmlStream.closeNode();
    })
  },

  parseOpen: function parseOpen(node) {
    if (this.parser) {
      this.parser.parseOpen(node);
      return true;
    }
    switch (node.name) {
      case 'comments':
        return true;
      default:
        this.parser = this.map[node.name];
        if (this.parser) {
          this.parser.parseOpen(node);
        }
        return true;
    }
  },
  parseText: function parseText(text) {
    if (this.parser) {
      this.parser.parseText(text);
    }
  },
  // authors:list
  // commets: [text:{t:text,r:[], rPh:[]}]
  parseClose: function parseClose(name) {
    if (this.parser) {
      if (!this.parser.parseClose(name)) {
        this.parser = undefined;
      }
      return true;
    }
    if (name=='comments') {
        this.model = {
          authors: this.map.authors.model,
          commentsList: this.map.commentList.model
        };
        return false;
    }
  }, addressFromName: function(address) {
    var match = address.match(/([A-Z]+)([0-9]+)/)
    var colName = match[1];
    var row = parseInt(match[2]);
    var col = 0;
    for (var c=0; c < colName.length; c++) {
      col += Math.pow(26,(colName.length-c-1))*(colName.charCodeAt(c)-64)
    }
    return {Row: row-1, Col: col-1}
  }
});
//# sourceMappingURL=sheet-xform.js.map
